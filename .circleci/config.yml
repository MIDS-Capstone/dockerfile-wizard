version: 2
defaults: &defaults
  docker:
    - image: google/cloud-sdk:latest
      
jobs:
  build:
    <<: *defaults
    
    steps:
    
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
            
      - checkout
      
      - setup_remote_docker
      - run:
          name: Generate full image name for new docker image
          command: |
            set -x
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              DOCKER_IMAGE_TAG=v${CIRCLE_BUILD_NUM}
              echo "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" > full_docker_image_name
            else
              DOCKER_IMAGE_TAG=${CIRCLE_BRANCH}
              echo "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" > full_docker_image_name
            fi
            
      - run:
          name: Build image
          command: |
            FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
            docker login nvcr.io -u \$oauthtoken -p $NVIDIA_DOCKER_OAUTH_KEY
            docker pull nvcr.io/nvidia/tensorflow:18.08-py3
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker build -t $DOCKER_ORGANIZATION/$FULL_DOCKER_IMAGE_NAME .
            
      - run:
          name: Push image to docker-hub
          command: |
            docker push $DOCKER_ORGANIZATION/$FULL_DOCKER_IMAGE_NAME && sleep 10
            
      - run:
          name: Push image to GCP
          # Removed from making $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage 
          command: |
            if [ "$DEPLOY_GCP" == "true" ]
            then
              FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
              echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
              gcloud auth activate-service-account --key-file gcloud-service-key.json
              gcloud --quiet auth configure-docker
              docker push $FULL_DOCKER_IMAGE_NAME
            else
              echo "Skipping image push to GCP.."
            fi
            
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
           
      - store_artifacts:
          path: Dockerfile
          
      - persist_to_workspace:
          root: .
          paths:
            - full_docker_image_name

  test:
    docker:
      - image: $DOCKER_ORGANIZATION/$FULL_DOCKER_IMAGE_NAME
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD

    steps:

      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
                
      
      - checkout
      
      - attach_workspace:
          at: workspace

      - run:
          name: start Xvfb for phantomjs test
          command: Xvfb :99
          background: true

      - run:
          name: bats tests
          command: |
            mkdir -p test_results/bats
            bats scripts/tests.bats | \
            perl scripts/tap-to-junit.sh > \
            test_results/bats/results.xml

      - store_test_results:
          path: test_results

      - store_artifacts:
          path: test_results

  deploy:
    <<: *defaults
    
    steps:
    
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
                
      - checkout

      - attach_workspace:
          at: workspace

      - run:
          name: Deploy to GCP
          command: |
            if [ "$DEPLOY_GCP" == "true" ]
            then
                echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
                set -x
                gcloud auth activate-service-account --key-file gcloud-service-key.json
                gcloud --quiet config set project $GOOGLE_PROJECT_ID
                gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
                EXISTING_CLUSTER=$(gcloud container clusters list --format="value(name)" --filter="name=$GOOGLE_CLUSTER_NAME")
                if [ "${EXISTING_CLUSTER}" != $GOOGLE_CLUSTER_NAME ]
                then
                  # Create cluster if it doesn't already exist
                  gcloud --quiet container clusters create $GOOGLE_CLUSTER_NAME --num-nodes=1
                else
                  gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_NAME
                fi
                FULL_DOCKER_IMAGE_NAME=$(cat workspace/full_docker_image_name)
                # Replace DOCKER_IMAGE_NAME placeholder in manifest with actual image name
                KUBE_CONFIG=$(cat ./manifests/app.yaml.template | sed "s|APP_NAME|$APP_NAME|g" | sed "s|DOCKER_IMAGE_NAME|$FULL_DOCKER_IMAGE_NAME|g")
                echo "$KUBE_CONFIG" | kubectl apply -f -
                # Wait for deployment to finish
                kubectl rollout status deployment/$APP_NAME
                kubectl get pods
            else
              echo "Skipping deploy to GCP k8.."
            fi
            

      - run:
          name: Test deployed application
          command: |
            # Wait for external ip to be assigned
            sleep 60
            kubectl get service $APP_NAME
            EXTERNAL_IP=$(kubectl get service $APP_NAME -o json | jq -r ".status.loadBalancer.ingress[0].ip")
            curl "http://$EXTERNAL_IP"

      - run:
          name: Tear down application and resources if configured (since this is a demo)
          command: |
            if [ "$DEPLOY_GCP" == "true" ]
            then
                if [ "${DELETE_CLUSTER_AT_END_OF_TEST}" == "true" ]
                then
                  kubectl delete service $APP_NAME
                  gcloud --quiet container clusters delete $GOOGLE_CLUSTER_NAME
                fi
            fi
            

workflows:
  version: 2
  build_test:
    jobs:
      - build:
          context: DOCKER_HUB
      - test:
          context: DOCKER_HUB
          requires:
            - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: fb-ss-k8-cluster-deploy

